employment_deprivation <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/employment_deprivation.csv"
)
working_and_child_tax_credits <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/working_and_child_tax_credits.csv"
)
tenure_people <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/tenure_people.csv"
)
# preparation
# One variable, one year
employment_deprivation <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/employment_deprivation.csv"
)
persons <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/persons.csv"
)
working_and_child_tax_credits <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/working_and_child_tax_credits.csv"
)
tenure_people <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/tenure_people.csv"
)
dcast(persons, year ~ ., length)
require(reshape2)
dcast(persons, year ~ ., length)
names(employment_distribution)
names(employment_distribution)
names(employment_deprivation)
names(persons)
example_pop <- persons
names(example_pop)
dcast(example_pop, year ~ . , length)
example_house <- tenure_people
dcast(example_house, year ~ . , length)
example_house <- subset(
example_house,
select=c("datazone", "HO.allhouseholds", "HO.council")
)
names(example_house)
tenure_households <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/tenure_households.csv"
)
example_house <- tenure_households
dcast(example_house, year ~ . , length)
example_house <- subset(
example_house,
select=c("datazone", "HO.allhouseholds", "HO.council")
)
head(example_house)
example_house <- rename(example_house,
replace=c("HO.allhouseholds"="total_count", "HO.council"="councilhouse_count")
)
require(plyr)
require(reshape2)
example_house <- rename(example_house,
replace=c("HO.allhouseholds"="total_count", "HO.council"="councilhouse_count")
)
head(example_house)
example_pop <- rename(
example_pop,
replace=c("GR.hspeop"="total_count", "GR.hswork"="workingage_count")
)
head(example_pop)
example_pop <- persons
example_pop <- subset(
example_pop,
subset=year==2010,
select=c("datazone", "GR.hspeop", "GR.hswork")
)
head(example_pop)
example_pop <- persons
example_pop <- subset(
example_pop,
subset=year==2001,
select=c("datazone", "GR.hspeop", "GR.hswork")
)
head(example_pop)
dcast(persons, year ~ ., length)
example_pop <- persons
example_pop <- subset(
example_pop,
subset=year==1996,
select=c("datazone", "GR.hspeop", "GR.hswork")
)
head(example_pop)
example_pop <- rename(
example_pop,
replace=c("GR.hspeop"="total_count", "GR.hswork"="workingage_count")
)
head(example_pop)
?write.csv
write.csv(example_pop, file="data/working_age_people_1996.csv")
rm(list=ls())
require(reshape2)
require(plyr)
require(stringr)
require(ggplot2)
require(maptools)
# preparation
require(plyr)
require(reshape2)
# One variable, one year
persons <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/persons.csv"
)
# GR_hspeop : all persons
# GR_hswork : working age population
# GP_sapemal : male population
# GP_sapemalchild : male children
# gp-sapemalwork : male working age
# GP-sapemalpens : male pensionable age
# GP_sapefem : female population
# GP_sapefemchild : female children
# gp-sapefemwork : female working age
# GP-sapefempens : female pensionable age
# HO_allpeople : total number of people
# HO_councilpeop : total number of people, rented from council
# HO-dwellings : total number of dwellings
# HO-Semidetached : number of semi-detached dwellings
working_and_child_tax_credits <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/working_and_child_tax_credits.csv"
)
tenure_households <- read.csv(
"G:/dropbox/Dropbox/Data/SNS/rearranged_data/by_year/tenure_households.csv"
)
# First two examples:
# 1) Working age population out of all population, last available year
example_pop <- persons
example_pop <- subset(
example_pop,
subset=year==1996,
select=c("datazone", "GR.hspeop", "GR.hswork")
)
example_pop <- rename(
example_pop,
replace=c("GR.hspeop"="total_count", "GR.hswork"="workingage_count")
)
write.csv(example_pop, file="data/working_age_people_1996.csv")
# 2) council households out of all households
example_house <- tenure_households
# already just for one year ( 2001)
example_house <- subset(
example_house,
select=c("datazone", "HO.allhouseholds", "HO.council")
)
example_house <- rename(example_house,
replace=c("HO.allhouseholds"="total_count", "HO.council"="councilhouse_count")
)
write.csv(example_house, file="data/council_houses")
write.csv(example_house, file="data/council_houses_2011.csv")
example_pop <- read.csv("data/workinga_age_people_1996.csv")
example_pop <- read.csv("data/working_age_people_1996.csv")
example_house <- read.csv("data/council_houses_2011.csv")
datazones_shp <- readShapeSpatial(
"G:/dropbox/Dropbox/Data/Shapefiles/scotland_2001_datazones.shp"
)
datazones_shp <- readShapeSpatial(
"G:/dropbox/Dropbox/Data/Shapefiles/scotland_dz_2001_datazones.shp"
)
datazones_shp <- readShapeSpatial(
"G:/dropbox/Dropbox/Data/Shapefiles/scotland_dz_2001.shp"
)
datazones_shp <- readShapeSpatial(
"G:/dropbox/Dropbox/Data/Shapefiles/scotland_2001_datazones/scotland_dz_2001.shp"
)
datazones_shp@data$id <- rownames(datazones_shp@data)
head(datazones_shp@data)
id_name <- subset(counties_shp@data, select=c("id", "zonecode"))
id_name <- subset(datazones_shp@data, select=c("id", "zonecode"))
datazones_map <- fortify(datazones_shp)
datazones_map <- join(datazones_map, id_name)
datazones_map <- rename(datazones_map, replace=c("zonecode"="datazone"))
pop_joined <- join(datazones_map, example_pop, by="datazone", type="full")
pop_joined <- arrange(pop_joined, group, order)
head(pop_joined)
g1 <- ggplot(subset(pop_joined)
g1 <- ggplot(pop_joined)
g1 + geom_polygon(aes(x=long, y=lat, fill=workingage_count, group=id)) + coord_equal()
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=workingage_count, group=id)) + coord_equal()
g2 + theme_minimal()
g2a <- g1 + geom_polygon(aes(x=long, y=lat, fill=total_count, group=id)) + coord_equal()
g2a + theme_minimal()
example_pop <- transform(example_pop, proportion=workingage_count/total_count)
head(example_pop)
datazones_shp@data$id <- rownames(datazones_shp@data)
id_name <- subset(datazones_shp@data, select=c("id", "zonecode"))
datazones_map <- fortify(datazones_shp)
datazones_map <- join(datazones_map, id_name)
datazones_map <- rename(datazones_map, replace=c("zonecode"="datazone"))
pop_joined <- join(datazones_map, example_pop, by="datazone", type="full")
pop_joined <- arrange(pop_joined, group, order)
g1 <- ggplot(pop_joined)
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=proportion, group=id)) + coord_equal()
g2 + theme_minimal()
names(example_house)
example_house <- transform(example_house, proportion=councilhouse_count/total_count)
house_joined(datazones_map, example_house, by="datazone", type="full")
house_joined <- join(datazones_map, example_house, by="datazone", type="full")
house_joined <- arrange(house_joined, group, order)
g1 <- ggplot(house_joined)
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=proportion, group=id)) + coord_equal()
g2 + theme_minimal()
theme_clean <- fuctnnion(base_size=12){
theme_grey(base_size) %+replace$%
theme(
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
axis.ticks.margin=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0,), "lines"),
complete=TRUE
)
}
?replace
help("%+replace%")
require(ggplot2)
theme_clean <- fuctnnion(base_size=12){
theme_grey(base_size) %+replace$%
theme(
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
axis.ticks.margin=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0,), "lines"),
complete=TRUE
)
}
theme_clean <- fuctnnion(base_size=12){
theme_grey(base_size) %+replace%
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0,), "lines"),
complete=TRUE
axis.ticks.margin=unit(0, "cm"),
)
theme(
}
theme_clean <- fuctnnion(base_size=12){
theme_grey(base_size) %+replace%
theme(
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
axis.ticks.margin=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0,), "lines"),
complete=TRUE
)
}
theme_clean <- function(base_size=12){
theme_grey(base_size) %+replace%
theme(
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
axis.ticks.margin=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0,), "lines"),
complete=TRUE
)
}
g1 <- ggplot(pop_joined)
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=proportion, group=id)) + coord_equal()
g2 + theme_clean()
?unit
require(grid)
theme_clean <- function(base_size=12){
theme_grey(base_size) %+replace%
theme(
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
axis.ticks.margin=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0,), "lines"),
complete=TRUE
)
}
g1 <- ggplot(pop_joined)
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=proportion, group=id)) + coord_equal()
g2 + theme_clean()
theme_clean <- function(base_size=12){
theme_grey(base_size) %+replace%
theme(
axis.title=element_blank(),
axis.text=element_blank(),
panel.background=element_blank(),
panel.grid=element_blank(),
axis.ticks.length=unit(0, "cm"),
axis.ticks.margin=unit(0, "cm"),
panel.margin=unit(0, "lines"),
plot.margin=unit(c(0,0,0,0), "lines"),
complete=TRUE
)
}
g1 <- ggplot(pop_joined)
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=proportion, group=id)) + coord_equal()
g2 + theme_clean()
?selectInput
require(shiny)
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(pop_joined)
g1 <- ggplot(pop_joined)
g2 <- g1 + geom_polygon(aes(x=long, y=lat, fill=proportion, group=id)) + coord_equal()
g2 + theme_clean()
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
require(shiny)
runApp()
runApp()
?runApp
runApp(list(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
))
shiny::runApp('E:/repos/test_shiny_apps')
shiny::runApp('E:/repos/test_shiny_apps')
apropos("combine.data.shapefile")
?combine.data.shapefile
??combine.data.shapefile
??poly2nb
require(spdep)
install.packages(spdep)
install.packages("spdep")
require(spdep)
W_nb <- poly2nb(datazones_shp)
head(w_nb)
head(W_nb)
W_nb <- poly2nb(
datazones_shp,
row.names=id_name$zonecode
)
W_nb <- poly2nb(
datazones_shp,
row.names=rownames(datazones_shp@data)
)
head(W_nb)
head(rownames(datazones_shp@data))
length(W_nb)
dim(id_name)
names(W_nb) <- id_name[,2]
head(W_nb)
W_list <- nb2listw(W_nb, style="B")
W_mat <- nb2mat(W_nb, style="B")
?nb2bat
?nb2mat
example(columbus)
coords <- coordinates(columbus)
col005 <- dnearneigh(coords, 0, 0.5, attr(col.gal.nb, "region.id"))
summary(col005)
col005.w.mat <- nb2mat(col005, zero.policy=TRUE)
table(round(apply(col005.w.mat, 1, sum)))
W_mat <- nb2mat(W_nb, style="B", zero.policy=TRUE)
head(W_mat)
W_mat[1:10,1:10]
dim(W_mat)
